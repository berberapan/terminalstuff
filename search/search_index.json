{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Start Terminalen \u00e4r det mest effektiva s\u00e4ttet att anv\u00e4nda Linux. I den h\u00e4r lilla uppgiften t\u00e4nkte jag g\u00e5 igenom de grundl\u00e4ggande kommandona f\u00f6r att ta sig runt och interagera med systemet. Innan du b\u00f6rjar se till att du har Git installerat. Tryck p\u00e5 'Next' eller navigera i menyn till v\u00e4nster f\u00f6r att ta dig vidare.","title":"Start"},{"location":"#start","text":"Terminalen \u00e4r det mest effektiva s\u00e4ttet att anv\u00e4nda Linux. I den h\u00e4r lilla uppgiften t\u00e4nkte jag g\u00e5 igenom de grundl\u00e4ggande kommandona f\u00f6r att ta sig runt och interagera med systemet. Innan du b\u00f6rjar se till att du har Git installerat. Tryck p\u00e5 'Next' eller navigera i menyn till v\u00e4nster f\u00f6r att ta dig vidare.","title":"Start"},{"location":"1/","text":"Shells Vad \u00e4r en terminal? Det \u00e4r ett program som tar emot text-baserade kommandon och kan visa text p\u00e5 sk\u00e4rmen. Programmet som tolkar och k\u00f6r kommandona fr\u00e5n terminalen \u00e4r ett s\u00e5 kallat 'shell'. I Linux-system \u00e4r Bash det vanligaste shell-programmet, men Zsh (Z shell) anv\u00e4nds ocks\u00e5 mycket och \u00e4r \u00e4ven standard i Apple-milj\u00f6er. F\u00f6r att se vilket shell-program ditt system anv\u00e4nder sig av skriv detta kommando i din terminal. echo $SHELL I nul\u00e4get beh\u00f6ver du inte t\u00e4nka allt f\u00f6r mycket p\u00e5 dessa shell-filer annat \u00e4n veta att det \u00e4r dessa som k\u00f6r terminalen och att uppgifterna kommer anv\u00e4nda sig av shell-scripts.","title":"1 - Shells"},{"location":"1/#shells","text":"Vad \u00e4r en terminal? Det \u00e4r ett program som tar emot text-baserade kommandon och kan visa text p\u00e5 sk\u00e4rmen. Programmet som tolkar och k\u00f6r kommandona fr\u00e5n terminalen \u00e4r ett s\u00e5 kallat 'shell'. I Linux-system \u00e4r Bash det vanligaste shell-programmet, men Zsh (Z shell) anv\u00e4nds ocks\u00e5 mycket och \u00e4r \u00e4ven standard i Apple-milj\u00f6er. F\u00f6r att se vilket shell-program ditt system anv\u00e4nder sig av skriv detta kommando i din terminal. echo $SHELL I nul\u00e4get beh\u00f6ver du inte t\u00e4nka allt f\u00f6r mycket p\u00e5 dessa shell-filer annat \u00e4n veta att det \u00e4r dessa som k\u00f6r terminalen och att uppgifterna kommer anv\u00e4nda sig av shell-scripts.","title":"Shells"},{"location":"2/","text":"L\u00e5t oss s\u00e4tta ig\u00e5ng! F\u00f6rst och fr\u00e4mst, klona repot med uppgifter. git clone https://github.com/berberapan/qc-terminal N\u00e4r du anv\u00e4nder kommandot ovan s\u00e5 klonar du repot till det directory du befinner dig i. I Linux s\u00e5 \u00e4r hemkatalogens adress /home/(ditt anv\u00e4ndarnamn) . Du kan se var du befinner dig i nul\u00e4get genom att anv\u00e4nda kommandot pwd (print working directory). pwd # visar exempelvis /home/anv\u00e4ndare N\u00e4r qc-terminal \u00e4r klonat s\u00e5 g\u00e5 in i repot. F\u00f6r att g\u00f6ra det s\u00e5 anv\u00e4nder man sig av ett av de mest anv\u00e4nda kommandona cd (change directory). Sidosp\u00e5r: I Linux s\u00e5 anv\u00e4nds kataloger (directories). En katalog \u00e4r i princip samma sak som en mapp i Windows. Skriv cd f\u00f6ljt av dit du vill g\u00e5. F\u00f6r att g\u00e5 tillbaka ett steg anv\u00e4nder du destinationen .. (dubbla punkter). En enkel punkt \u00e4r din nuvarande position. F\u00f6r att g\u00e5 direkt till hemkatalogen kan du anv\u00e4nda en tilde '~' som destination. cd katalognamn # G\u00e5 in i en katalog cd .. # G\u00e5 tillbaka ett steg cd ~ # G\u00e5 direkt till hemkatalogen cd ~/Downloads # G\u00e5 till Downloads i hemkatalogen Tips: Om du trycker p\u00e5 tab-knappen s\u00e5 auto-completas destinationen om systemet kan hitta den. Uppgift Orientera dig till Uppgifter/1 i repot du klonade ner och g\u00e5 sedan till n\u00e4sta sida. S\u00e5 h\u00e4r ser strukturen ut f\u00f6r qc-terminal. (Om du har sv\u00e5rt att hitta kan du se vad som finns i nuvarande katalog genom att skriva ls , mer om det kommandot senare)","title":"2 - L\u00e5t oss s\u00e4tta ig\u00e5ng!"},{"location":"2/#lat-oss-satta-igang","text":"F\u00f6rst och fr\u00e4mst, klona repot med uppgifter. git clone https://github.com/berberapan/qc-terminal N\u00e4r du anv\u00e4nder kommandot ovan s\u00e5 klonar du repot till det directory du befinner dig i. I Linux s\u00e5 \u00e4r hemkatalogens adress /home/(ditt anv\u00e4ndarnamn) . Du kan se var du befinner dig i nul\u00e4get genom att anv\u00e4nda kommandot pwd (print working directory). pwd # visar exempelvis /home/anv\u00e4ndare N\u00e4r qc-terminal \u00e4r klonat s\u00e5 g\u00e5 in i repot. F\u00f6r att g\u00f6ra det s\u00e5 anv\u00e4nder man sig av ett av de mest anv\u00e4nda kommandona cd (change directory). Sidosp\u00e5r: I Linux s\u00e5 anv\u00e4nds kataloger (directories). En katalog \u00e4r i princip samma sak som en mapp i Windows. Skriv cd f\u00f6ljt av dit du vill g\u00e5. F\u00f6r att g\u00e5 tillbaka ett steg anv\u00e4nder du destinationen .. (dubbla punkter). En enkel punkt \u00e4r din nuvarande position. F\u00f6r att g\u00e5 direkt till hemkatalogen kan du anv\u00e4nda en tilde '~' som destination. cd katalognamn # G\u00e5 in i en katalog cd .. # G\u00e5 tillbaka ett steg cd ~ # G\u00e5 direkt till hemkatalogen cd ~/Downloads # G\u00e5 till Downloads i hemkatalogen Tips: Om du trycker p\u00e5 tab-knappen s\u00e5 auto-completas destinationen om systemet kan hitta den.","title":"L\u00e5t oss s\u00e4tta ig\u00e5ng!"},{"location":"2/#uppgift","text":"Orientera dig till Uppgifter/1 i repot du klonade ner och g\u00e5 sedan till n\u00e4sta sida. S\u00e5 h\u00e4r ser strukturen ut f\u00f6r qc-terminal. (Om du har sv\u00e5rt att hitta kan du se vad som finns i nuvarande katalog genom att skriva ls , mer om det kommandot senare)","title":"Uppgift"},{"location":"3/","text":"Echoes of wisdom Vi borde nu befinna oss i Uppgifter/1 . F\u00f6rs\u00e4kra dig att s\u00e5 \u00e4r fallet genom att skriva pwd . P\u00e5 f\u00f6rsta sidan anv\u00e4nde vi echo -kommandot f\u00f6r att se vilket shell-program som anv\u00e4ndes, men vi gick inte in p\u00e5 vad echo \u00e4r. Echo \u00e4r ett simpelt kommando som returnerar text. Om du anger en fil s\u00e5 returneras filnamnet, om du anger en str\u00e4ng s\u00e5 returneras den. N\u00e4r vi kollade p\u00e5 vilket shell-program som anv\u00e4ndes s\u00e5 anv\u00e4nde vi echo $SHELL . H\u00e4r \u00e4r $SHELL en variabel som inneh\u00e5ller s\u00f6kv\u00e4gen till den shell som terminalen anv\u00e4nder. Du kan skapa dina egna variabler i terminalen. F\u00f6r att variabeln ska finnas i shell-milj\u00f6n s\u00e5 m\u00e5ste export anv\u00e4ndas n\u00e4r du skapar den. export min_variabel=\"super\" echo $min_variabel # Skriver ut super Uppgift Skapa en variabel med namn greeting och ge den v\u00e4rdet \"Hello world\". N\u00e4r du \u00e4r klar k\u00f6r: bash test.sh Detta kommer kontrollera att v\u00e4rdet \u00e4r korrekt (kr\u00e4ver att du \u00e4r i Uppgifter/1). Om den ger gr\u00f6nt, g\u00e5 till n\u00e4sta sida. Extra info Varje ny terminal-session startar i en ny milj\u00f6, vilket betyder att dina variabler inte finns kvar fr\u00e5n f\u00f6rra sessionen. Om du vill att en variabel alltid ska finnas tillg\u00e4nglig m\u00e5ste export-kommandot k\u00f6ras varje g\u00e5ng du loggar in. Detta kan automatiseras genom att l\u00e4gga till kommandot i shell-programmets inst\u00e4llningsfil. Om du \u00e4r nyfiken kan du titta p\u00e5 denna inst\u00e4llningsfil (en s\u00e5 kallad dotfil) som ligger dold i din hemkatalog. F\u00f6r bash-anv\u00e4ndare: cat ~/.bashrc Detta \u00e4r s\u00e4rskilt anv\u00e4ndbart n\u00e4r man till exempel vill l\u00e4gga till program i systemets PATH.","title":"3 - Echoes of wisdom"},{"location":"3/#echoes-of-wisdom","text":"Vi borde nu befinna oss i Uppgifter/1 . F\u00f6rs\u00e4kra dig att s\u00e5 \u00e4r fallet genom att skriva pwd . P\u00e5 f\u00f6rsta sidan anv\u00e4nde vi echo -kommandot f\u00f6r att se vilket shell-program som anv\u00e4ndes, men vi gick inte in p\u00e5 vad echo \u00e4r. Echo \u00e4r ett simpelt kommando som returnerar text. Om du anger en fil s\u00e5 returneras filnamnet, om du anger en str\u00e4ng s\u00e5 returneras den. N\u00e4r vi kollade p\u00e5 vilket shell-program som anv\u00e4ndes s\u00e5 anv\u00e4nde vi echo $SHELL . H\u00e4r \u00e4r $SHELL en variabel som inneh\u00e5ller s\u00f6kv\u00e4gen till den shell som terminalen anv\u00e4nder. Du kan skapa dina egna variabler i terminalen. F\u00f6r att variabeln ska finnas i shell-milj\u00f6n s\u00e5 m\u00e5ste export anv\u00e4ndas n\u00e4r du skapar den. export min_variabel=\"super\" echo $min_variabel # Skriver ut super","title":"Echoes of wisdom"},{"location":"3/#uppgift","text":"Skapa en variabel med namn greeting och ge den v\u00e4rdet \"Hello world\". N\u00e4r du \u00e4r klar k\u00f6r: bash test.sh Detta kommer kontrollera att v\u00e4rdet \u00e4r korrekt (kr\u00e4ver att du \u00e4r i Uppgifter/1). Om den ger gr\u00f6nt, g\u00e5 till n\u00e4sta sida.","title":"Uppgift"},{"location":"3/#extra-info","text":"Varje ny terminal-session startar i en ny milj\u00f6, vilket betyder att dina variabler inte finns kvar fr\u00e5n f\u00f6rra sessionen. Om du vill att en variabel alltid ska finnas tillg\u00e4nglig m\u00e5ste export-kommandot k\u00f6ras varje g\u00e5ng du loggar in. Detta kan automatiseras genom att l\u00e4gga till kommandot i shell-programmets inst\u00e4llningsfil. Om du \u00e4r nyfiken kan du titta p\u00e5 denna inst\u00e4llningsfil (en s\u00e5 kallad dotfil) som ligger dold i din hemkatalog. F\u00f6r bash-anv\u00e4ndare: cat ~/.bashrc Detta \u00e4r s\u00e4rskilt anv\u00e4ndbart n\u00e4r man till exempel vill l\u00e4gga till program i systemets PATH.","title":"Extra info"},{"location":"4/","text":"Alla dessa flaggor... G\u00e5 nu till Uppgifter/2 . Tips cd ../2 Innan vi g\u00e5r vidare, h\u00e4r \u00e4r n\u00e5gra anv\u00e4ndbara tricks f\u00f6r terminalen: Ctrl + l eller clear : Rensar terminalf\u00f6nstret history : Visar tidigare anv\u00e4nda kommandon \u2b06\ufe0f ( upp\u00e5t-pilen ): Bl\u00e4ddrar genom tidigare kommandon Nu ska vi g\u00e5 igenom ett viktigt kommando. Tills nu har vi r\u00f6rt oss genom katalogerna utan att egentligen veta vad som finns i dem. F\u00f6r att hj\u00e4lpa oss med det och annat nyttigt s\u00e5 har vi kommandot ls (list). Om du anger endast ls s\u00e5 kommer filer och kataloger i katalogen du befinner dig i att visas. Vilket \u00e4r nyttigt, men m\u00e5nga g\u00e5nger vill man ha lite mer information. D\u00e4rf\u00f6r m\u00e5ste vi b\u00f6rja anv\u00e4nda oss av flaggor. Du har s\u00e4kert anv\u00e4nt flaggor n\u00e4r du hanterat ett projekt i git eller n\u00e4r du anv\u00e4nt dig av curl. Flaggor b\u00f6rjar med antingen - eller dubbla -- f\u00f6ljt av en bokstav eller ord. Exempelvis s\u00e5 kan du oftast f\u00e5 lite hj\u00e4lp med att f\u00f6rst\u00e5 hur ett kommando fungerar genom att skriva --help , vilket oftast \u00e4r flaggan f\u00f6r de kortfattade instruktionerna. Testa g\u00e4rna hj\u00e4lp-flaggan tillsammans med ls f\u00f6r att se outputen. ls --help ls har m\u00e5nga anv\u00e4ndbara flaggor, men tv\u00e5 av de mest anv\u00e4nda \u00e4r: -l (long listing format) Denna flagga ger en detaljerad lista med information om varje fil: R\u00e4ttigheter (vem som f\u00e5r l\u00e4sa/skriva/k\u00f6ra filen) Antal l\u00e4nkar till filen \u00c4gare Grupp\u00e4gare Filstorlek Senast \u00e4ndrad (datum och tid) Filnamn R\u00e4ttigheterna kommer vi g\u00e5 igenom n\u00e4rmre lite senare. -a (all) Som standard visar inte ls dolda filer (filer som b\u00f6rjar med en punkt). Med -a flaggan visas alla filer, inklusive: Dolda filer (de som b\u00f6rjar med .) Katalogen du st\u00e5r i (.) F\u00f6r\u00e4ldrakatalogen (..) Du kan ocks\u00e5 kombinera flaggor till en flagga. Till exempel visar ls -la eller ls -al en detaljerad lista \u00f6ver alla filer, inklusive dolda filer. Ett tips \u00e4r att l\u00e4gga till -h (human readable) n\u00e4r du anv\u00e4nder -l f\u00f6r att visa filstorlekar i ett mer l\u00e4sbart format (KB, MB, GB ist\u00e4llet f\u00f6r byte). Uppgift Precis som i f\u00f6rra delen s\u00e5 skriv bash test.sh f\u00f6r att starta uppgiften. Du kan anv\u00e4nda ls kommandot i skriptet. Ange \"svara\" n\u00e4r du vill svara p\u00e5 en fr\u00e5ga","title":"4 - Alla dessa flaggor..."},{"location":"4/#alla-dessa-flaggor","text":"G\u00e5 nu till Uppgifter/2 . Tips cd ../2 Innan vi g\u00e5r vidare, h\u00e4r \u00e4r n\u00e5gra anv\u00e4ndbara tricks f\u00f6r terminalen: Ctrl + l eller clear : Rensar terminalf\u00f6nstret history : Visar tidigare anv\u00e4nda kommandon \u2b06\ufe0f ( upp\u00e5t-pilen ): Bl\u00e4ddrar genom tidigare kommandon Nu ska vi g\u00e5 igenom ett viktigt kommando. Tills nu har vi r\u00f6rt oss genom katalogerna utan att egentligen veta vad som finns i dem. F\u00f6r att hj\u00e4lpa oss med det och annat nyttigt s\u00e5 har vi kommandot ls (list). Om du anger endast ls s\u00e5 kommer filer och kataloger i katalogen du befinner dig i att visas. Vilket \u00e4r nyttigt, men m\u00e5nga g\u00e5nger vill man ha lite mer information. D\u00e4rf\u00f6r m\u00e5ste vi b\u00f6rja anv\u00e4nda oss av flaggor. Du har s\u00e4kert anv\u00e4nt flaggor n\u00e4r du hanterat ett projekt i git eller n\u00e4r du anv\u00e4nt dig av curl. Flaggor b\u00f6rjar med antingen - eller dubbla -- f\u00f6ljt av en bokstav eller ord. Exempelvis s\u00e5 kan du oftast f\u00e5 lite hj\u00e4lp med att f\u00f6rst\u00e5 hur ett kommando fungerar genom att skriva --help , vilket oftast \u00e4r flaggan f\u00f6r de kortfattade instruktionerna. Testa g\u00e4rna hj\u00e4lp-flaggan tillsammans med ls f\u00f6r att se outputen. ls --help ls har m\u00e5nga anv\u00e4ndbara flaggor, men tv\u00e5 av de mest anv\u00e4nda \u00e4r: -l (long listing format) Denna flagga ger en detaljerad lista med information om varje fil: R\u00e4ttigheter (vem som f\u00e5r l\u00e4sa/skriva/k\u00f6ra filen) Antal l\u00e4nkar till filen \u00c4gare Grupp\u00e4gare Filstorlek Senast \u00e4ndrad (datum och tid) Filnamn R\u00e4ttigheterna kommer vi g\u00e5 igenom n\u00e4rmre lite senare. -a (all) Som standard visar inte ls dolda filer (filer som b\u00f6rjar med en punkt). Med -a flaggan visas alla filer, inklusive: Dolda filer (de som b\u00f6rjar med .) Katalogen du st\u00e5r i (.) F\u00f6r\u00e4ldrakatalogen (..) Du kan ocks\u00e5 kombinera flaggor till en flagga. Till exempel visar ls -la eller ls -al en detaljerad lista \u00f6ver alla filer, inklusive dolda filer. Ett tips \u00e4r att l\u00e4gga till -h (human readable) n\u00e4r du anv\u00e4nder -l f\u00f6r att visa filstorlekar i ett mer l\u00e4sbart format (KB, MB, GB ist\u00e4llet f\u00f6r byte).","title":"Alla dessa flaggor..."},{"location":"4/#uppgift","text":"Precis som i f\u00f6rra delen s\u00e5 skriv bash test.sh f\u00f6r att starta uppgiften. Du kan anv\u00e4nda ls kommandot i skriptet. Ange \"svara\" n\u00e4r du vill svara p\u00e5 en fr\u00e5ga","title":"Uppgift"},{"location":"5/","text":"The cat's pajamas N\u00e4st p\u00e5 tur s\u00e5 har vi cat -kommandot. Vi r\u00f6r oss vidare till Uppgifter/3 i terminalen. cat (concatenate) \u00e4r ett av de \u00e4ldsta kommandona som finns i Linux och det fungerar \u00e4ven p\u00e5 f\u00f6rsta versionen av Unix fr\u00e5n 1973. Kommandot kan anv\u00e4ndas f\u00f6r att se vad en fil inneh\u00e5ller utan att beh\u00f6va \u00f6ppna ett separat program. Anv\u00e4nd cat filnamn och filens inneh\u00e5ll visas direkt i terminalen. Du kan \u00e4ven sammanfoga flera filer samtidigt. Exempelvis cat fil1 fil2 fil3 skulle visa alla de tre filernas inneh\u00e5ll en efter en. Superbra att kunna se inneh\u00e5llet av filer utan att beh\u00f6va \u00f6ppna n\u00e5gra andra program men det m\u00e5ste v\u00e4l vara n\u00e5got mer man kan g\u00f6ra? Det kan vara bra att ha koll p\u00e5 Unix-filosofin n\u00e4r vi pratar om kommandon, specifikt de tv\u00e5 f\u00f6rsta punkterna. Sammanfattning av filosofin p\u00e5 Wikipedia fr\u00e5n McIlroy. Skriv program som g\u00f6r en sak och g\u00f6r det bra. Skriv program som arbetar tillsammans. Skriv program f\u00f6r att hantera textfl\u00f6den eftersom det \u00e4r ett universellt gr\u00e4nssnitt. cat g\u00f6r sin sak v\u00e4ldigt bra, och eftersom den f\u00f6ljer Unix-filosofin s\u00e5 interagerar den v\u00e4ldigt bra med andra kommandon och system. F\u00f6r att demonstrera det s\u00e5 kan vi anv\u00e4nda n\u00e5got som kallas 'redirects' i terminalen, bland annat > , >> och < . Nedan anv\u00e4nder vi de tv\u00e5 f\u00f6rsta tillsammans med cat , < \u00e4r n\u00e5got som inte riktigt beh\u00f6vs med kommandona vi har l\u00e4rt oss hittills men \u00e4r bra att f\u00f6rst\u00e5. Output redirection overwrite (>) > anv\u00e4nds f\u00f6r att skriva output till en fil. Om filen redan existerar s\u00e5 skriver man \u00f6ver den (s\u00e5 h\u00e5ll tungan r\u00e4tt i mun och kontrollera att du skrivit r\u00e4tt filnamn). I exemplet nedan s\u00e5 skrivs det som finns i fil1 och fil2 in tillsammans i en ny tredje fil. cat fil1.txt fil2.txt > fil3.txt Det \u00e4r inte bara cat som du kan anv\u00e4nda det h\u00e4r f\u00f6r. Allt som har en output kan anv\u00e4ndas, exempelvis echo som vi tagit upp tidigare kan du anv\u00e4nda f\u00f6r att skapa en ny fil med det som den printar. echo $PATH > minpath.txt Output redirection append (>>) >> fungerar som overwrite men l\u00e4gger ist\u00e4llet till output till filen. Exemplet nedan g\u00f6r att inneh\u00e5llet fr\u00e5n fil2 l\u00e4ggs till fil1 ist\u00e4llet f\u00f6r att skapa en ny fil. cat fil2.txt >> fil1.txt Input redirection < matar in inneh\u00e5llet fr\u00e5n en fil till ett kommando. Som jag n\u00e4mnde ovan \u00e4r det lite \u00f6verfl\u00f6digt f\u00f6r det vi jobbat med hittills s\u00e5 jag passar p\u00e5 att introducera tv\u00e5 nya kommandon h\u00e4r. Vi kan testa detta med kommandot wc (word count) som r\u00e4knar rader, ord och tecken i en fil. Med flaggan -l r\u00e4knar vi rader. wc -l < fil1.txt N\u00e4r vi anv\u00e4nder wc -l < fil1.txt s\u00e5 l\u00e4ser vi inneh\u00e5llet i filen och skickar det direkt till wc -kommandot. Det h\u00e4r kan j\u00e4mf\u00f6ras med wc -l fil1.txt som ger samma resultat. Vad \u00e4r d\u00e5 skillnaden? Varf\u00f6r ens anv\u00e4nda input redirection? Med wc -l fil1.txt s\u00e5 s\u00e4ger vi \u00e5t wc \"h\u00e4r \u00e4r en fil, l\u00e4s den\" Med wc -l < fil1.txt s\u00e5 s\u00e4ger vi ist\u00e4llet \"h\u00e4r \u00e4r inneh\u00e5llet fr\u00e5n en fil\" I de flesta fall f\u00e5r du samma resultat, men vissa kommandon \u00e4r byggda f\u00f6r att ta emot inneh\u00e5ll direkt och inte filnamn. Det h\u00e4r \u00e4r ett enkelt exempel p\u00e5 hur olika Unix-kommandon kan samarbeta p\u00e5 olika s\u00e4tt, antingen genom att skicka filer eller inneh\u00e5ll mellan varandra. Innan vi hoppar p\u00e5 uppgifterna s\u00e5 ska jag snabbt n\u00e4mna kommandot sort . Den sorterar text alfabetiskt men kan \u00e4ven sortera p\u00e5 annat, men det f\u00e5r du unders\u00f6ka sj\u00e4lv i --help. S\u00e4g att vi har en fil med olika emailadresser som du vill sortera i alfabetiskt ordning i en ny fil d\u00e5 kan du skriva som i exemplet nedan. sort < emails.txt > sorterade_emails.txt Precis som tidigare exempel s\u00e5 g\u00e5r det bra att skriva utan input redirection h\u00e4r d\u00e5 sort kan hantera filnamn utan problem. Uppgift Starta genom att skriva bash test.sh som vanligt.","title":"5 - The cat's pajamas"},{"location":"5/#the-cats-pajamas","text":"N\u00e4st p\u00e5 tur s\u00e5 har vi cat -kommandot. Vi r\u00f6r oss vidare till Uppgifter/3 i terminalen. cat (concatenate) \u00e4r ett av de \u00e4ldsta kommandona som finns i Linux och det fungerar \u00e4ven p\u00e5 f\u00f6rsta versionen av Unix fr\u00e5n 1973. Kommandot kan anv\u00e4ndas f\u00f6r att se vad en fil inneh\u00e5ller utan att beh\u00f6va \u00f6ppna ett separat program. Anv\u00e4nd cat filnamn och filens inneh\u00e5ll visas direkt i terminalen. Du kan \u00e4ven sammanfoga flera filer samtidigt. Exempelvis cat fil1 fil2 fil3 skulle visa alla de tre filernas inneh\u00e5ll en efter en. Superbra att kunna se inneh\u00e5llet av filer utan att beh\u00f6va \u00f6ppna n\u00e5gra andra program men det m\u00e5ste v\u00e4l vara n\u00e5got mer man kan g\u00f6ra? Det kan vara bra att ha koll p\u00e5 Unix-filosofin n\u00e4r vi pratar om kommandon, specifikt de tv\u00e5 f\u00f6rsta punkterna. Sammanfattning av filosofin p\u00e5 Wikipedia fr\u00e5n McIlroy. Skriv program som g\u00f6r en sak och g\u00f6r det bra. Skriv program som arbetar tillsammans. Skriv program f\u00f6r att hantera textfl\u00f6den eftersom det \u00e4r ett universellt gr\u00e4nssnitt. cat g\u00f6r sin sak v\u00e4ldigt bra, och eftersom den f\u00f6ljer Unix-filosofin s\u00e5 interagerar den v\u00e4ldigt bra med andra kommandon och system. F\u00f6r att demonstrera det s\u00e5 kan vi anv\u00e4nda n\u00e5got som kallas 'redirects' i terminalen, bland annat > , >> och < . Nedan anv\u00e4nder vi de tv\u00e5 f\u00f6rsta tillsammans med cat , < \u00e4r n\u00e5got som inte riktigt beh\u00f6vs med kommandona vi har l\u00e4rt oss hittills men \u00e4r bra att f\u00f6rst\u00e5.","title":"The cat's pajamas"},{"location":"5/#output-redirection-overwrite","text":"> anv\u00e4nds f\u00f6r att skriva output till en fil. Om filen redan existerar s\u00e5 skriver man \u00f6ver den (s\u00e5 h\u00e5ll tungan r\u00e4tt i mun och kontrollera att du skrivit r\u00e4tt filnamn). I exemplet nedan s\u00e5 skrivs det som finns i fil1 och fil2 in tillsammans i en ny tredje fil. cat fil1.txt fil2.txt > fil3.txt Det \u00e4r inte bara cat som du kan anv\u00e4nda det h\u00e4r f\u00f6r. Allt som har en output kan anv\u00e4ndas, exempelvis echo som vi tagit upp tidigare kan du anv\u00e4nda f\u00f6r att skapa en ny fil med det som den printar. echo $PATH > minpath.txt","title":"Output redirection overwrite (&gt;)"},{"location":"5/#output-redirection-append","text":">> fungerar som overwrite men l\u00e4gger ist\u00e4llet till output till filen. Exemplet nedan g\u00f6r att inneh\u00e5llet fr\u00e5n fil2 l\u00e4ggs till fil1 ist\u00e4llet f\u00f6r att skapa en ny fil. cat fil2.txt >> fil1.txt","title":"Output redirection append (&gt;&gt;)"},{"location":"5/#input-redirection","text":"< matar in inneh\u00e5llet fr\u00e5n en fil till ett kommando. Som jag n\u00e4mnde ovan \u00e4r det lite \u00f6verfl\u00f6digt f\u00f6r det vi jobbat med hittills s\u00e5 jag passar p\u00e5 att introducera tv\u00e5 nya kommandon h\u00e4r. Vi kan testa detta med kommandot wc (word count) som r\u00e4knar rader, ord och tecken i en fil. Med flaggan -l r\u00e4knar vi rader. wc -l < fil1.txt N\u00e4r vi anv\u00e4nder wc -l < fil1.txt s\u00e5 l\u00e4ser vi inneh\u00e5llet i filen och skickar det direkt till wc -kommandot. Det h\u00e4r kan j\u00e4mf\u00f6ras med wc -l fil1.txt som ger samma resultat. Vad \u00e4r d\u00e5 skillnaden? Varf\u00f6r ens anv\u00e4nda input redirection? Med wc -l fil1.txt s\u00e5 s\u00e4ger vi \u00e5t wc \"h\u00e4r \u00e4r en fil, l\u00e4s den\" Med wc -l < fil1.txt s\u00e5 s\u00e4ger vi ist\u00e4llet \"h\u00e4r \u00e4r inneh\u00e5llet fr\u00e5n en fil\" I de flesta fall f\u00e5r du samma resultat, men vissa kommandon \u00e4r byggda f\u00f6r att ta emot inneh\u00e5ll direkt och inte filnamn. Det h\u00e4r \u00e4r ett enkelt exempel p\u00e5 hur olika Unix-kommandon kan samarbeta p\u00e5 olika s\u00e4tt, antingen genom att skicka filer eller inneh\u00e5ll mellan varandra. Innan vi hoppar p\u00e5 uppgifterna s\u00e5 ska jag snabbt n\u00e4mna kommandot sort . Den sorterar text alfabetiskt men kan \u00e4ven sortera p\u00e5 annat, men det f\u00e5r du unders\u00f6ka sj\u00e4lv i --help. S\u00e4g att vi har en fil med olika emailadresser som du vill sortera i alfabetiskt ordning i en ny fil d\u00e5 kan du skriva som i exemplet nedan. sort < emails.txt > sorterade_emails.txt Precis som tidigare exempel s\u00e5 g\u00e5r det bra att skriva utan input redirection h\u00e4r d\u00e5 sort kan hantera filnamn utan problem.","title":"Input redirection"},{"location":"5/#uppgift","text":"Starta genom att skriva bash test.sh som vanligt.","title":"Uppgift"},{"location":"6/","text":"I Ragnar \u00d6stbergs anda Uppgiter/4 st\u00e5r p\u00e5 tur. I den h\u00e4r delen ska vi ta en titt p\u00e5 kommandon f\u00f6r att skapa, flytta och ta bort filer. Skapa Som vi s\u00e5g i den f\u00f6rra delen s\u00e5 kan man skapa en fil genom redirection. M\u00e5nga saker g\u00e5r att g\u00f6ra p\u00e5 olika s\u00e4tt, tack vare hur saker \u00e4r byggda enligt Unix-filosofin. Det vanligaste s\u00e4ttet f\u00f6r att skapa en tom fil \u00e4r dock att anv\u00e4nda kommandot touch . Du beh\u00f6ver bara ange vilket filnamn du vill ha. Du beh\u00f6ver dessutom inte vara r\u00e4dd f\u00f6r att skriva \u00f6ver n\u00e5got av filens inneh\u00e5ll om du anger ett filnamn som redan existerar. Det enda som h\u00e4nder i det fallet \u00e4r att \"senast \u00e4ndrad\"-tiden uppdateras till tiden du skrev kommandot. touch filnamn.java F\u00f6r att skapa en ny katalog (som sagt tidigare, kan lika g\u00e4rna s\u00e4ga mapp), s\u00e5 anv\u00e4nder vi kommandot mkdir (make directory). Du kan skapa flera underkataloger samtidigt med -p flaggan. # Skapa en ny katalog mkdir min_javakod # Skapa flera kataloger i en f\u00f6r\u00e4lderkatalog. Den skapas ocks\u00e5 om den inte redan existerar. mkdir -p min_javakod/{src,test} Flytta/\u00c4ndra F\u00f6r att flytta filer och kataloger anv\u00e4nder vi kommandot mv (move). Detta kommando anv\u00e4nds ocks\u00e5 f\u00f6r att byta namn p\u00e5 filer och kataloger. Kommandot \u00e4r v\u00e4ldigt enkelt, f\u00f6rst anger du k\u00e4llan och sedan destinationen. # Flytta en fil till en katalog mv filnamn.java min_javakod/ # Byta namn p\u00e5 en fil mv filnamn.java minjavafil.java # Flytta och byta namn samtidigt mv filnamn.java min_javakod/minjavafil.java F\u00f6r att kopiera filer anv\u00e4nder vi kommandot cp (copy). Det fungerar p\u00e5 liknande s\u00e4tt som mv . # Kopiera en fil cp filnamn.java minjavafil_kopia.java # Kopiera en fil till en annan katalog cp filnamn.java min_javakod/ # Kopiera en hel katalog och dess inneh\u00e5ll (anv\u00e4nd -r flaggan) cp -r min_javakod min_javakod_backup Ta bort F\u00f6r att ta bort filer och kataloger anv\u00e4nds kommandot rm (remove). Var f\u00f6rsiktig med detta kommando eftersom filerna f\u00f6rsvinner helt och h\u00e5llet (ingen paperskorg eller liknande h\u00e4r). De flesta moderna operativsystem har skydd mot detta nu men det var till och med l\u00e4tt att ta bort allt inneh\u00e5ll fr\u00e5n en dator med ett enkelt rm -rf / kommando f\u00f6rr (/ destinationen \u00e4r roten f\u00f6r operativsystemet). # Ta bort en fil rm filnamn.java # Ta bort en katalog och allt dess inneh\u00e5ll (recursive) rm -r min_javakod # Tvinga borttagning utan varningar (-f f\u00f6r force) rm -f k\u00e4nsligfil.java # Kombinera flaggor f\u00f6r att ta bort en katalog utan varningar rm -rf k\u00e4nslig_katalog Sudo N\u00e4r man ska \u00e4ndra i filer utanf\u00f6r hemkatalogen eller beh\u00f6ver utf\u00f6ra n\u00e5got annat systemkritiskt s\u00e5 kommer kommandot kr\u00e4va att visa att du har admin-r\u00e4ttigheter. Om du har det s\u00e5 kan du d\u00e5 anv\u00e4nda sudo (superuser do). Ibland k\u00e4nns det som att l\u00e4gga till sudo l\u00f6ser det mesta. Men var f\u00f6rsiktig med hur du anv\u00e4nder sudo . N\u00e4r du anv\u00e4nder sudo f\u00f6r att installera n\u00e5got, exempelvis en nodejs modul, s\u00e5 ger du modulen adminbeh\u00f6righeter (den har allts\u00e5 full tillg\u00e5ng till ditt system). S\u00e5 om du inte \u00e4r s\u00e4ker p\u00e5 k\u00e4llan anv\u00e4nd inte sudo , och fundera alltid p\u00e5 varf\u00f6r n\u00e5got kr\u00e4ver sudo innan du ger den n\u00e5gra beh\u00f6righeter. # Installera ett program (exempel fr\u00e5n Ubuntu/Debian) sudo apt install programnamn # Redigera en systemfil sudo nano /etc/hosts # Ta bort en skyddad fil sudo rm /var/log/systemfil.log # Skapa en katalog i systemet sudo mkdir /opt/mittprogram Wildcard N\u00e4r du anv\u00e4nder kommandon som inte beh\u00f6ver en specifik adress till en fil s\u00e5 kan du anv\u00e4nda ett s\u00e5 kallat 'wildcard.' S\u00e4g att du exempelvis vill ta bort alla java-filer i en mapp. rm javaprojekt/src/*.java Allt som avslutas med .java kommer att tas bort i src-katalogen i exemplet. Du kan s\u00e4tta asterisken efter lite text ocks\u00e5. # Tar bort alla filer med controller i namnet. rm javaprojekt/src/*controller* # Tar bort alla filer som b\u00f6rjar med fil rm javaprojekt/src/fil* Ett wildcard f\u00f6r ett tecken g\u00f6r man med ? . # Matchar filer som fil-1.txt och fil-A.txt men inte med fil-12.txt ls fil?.txt F\u00f6r att matcha mer \u00e4n ett tecken p\u00e5 en position kan man anv\u00e4nda []. Ranges f\u00f6r b\u00e5de bokst\u00e4ver och siffror fungerar. Du kan \u00e4ven matcha med tecken som inte finns med ett !. # Listar alla txt-filer som b\u00f6rjar med fil1, fil2 eller fil3. fil4 inkluderas exempelvis inte. ls fil[1-3].txt # Samma sak med bokst\u00e4ver. ls fil[a-c].txt # Om jag vill lista alla txt-filer f\u00f6rutom 1 till 3. ls fil[!1-3].txt Man kan \u00e4ven kombinera olika wildcards. ls -l [A-C]*.java listar alla java-filer som b\u00f6rjar p\u00e5 A till C. Allm\u00e4na tips Du kanske har noterat att tecken som ! och ? kan vara symboler du vill anv\u00e4nda i text. S\u00e4g att vi skulle haft Hello world! i den f\u00f6rsta uppgiften ist\u00e4llet f\u00f6r Hello world d\u00e5 hade man varit tvungen att anv\u00e4nda ett escape-tecken (\\) och skriva det s\u00e5 h\u00e4r export greeting=Hello world\\! . Ett annat litet tips \u00e4r att du kan kombinera kommandon genom att skriva &&. H\u00e4r under s\u00e5 flyttar jag mig till hemkatalogen och skapar katalogen 'nytt' i den p\u00e5 en och samma rad. cd ~ && mkdir nytt Uppgift Starta genom bash test.sh som vanligt.","title":"6 - I Ragnar \u00d6stbergs anda"},{"location":"6/#i-ragnar-ostbergs-anda","text":"Uppgiter/4 st\u00e5r p\u00e5 tur. I den h\u00e4r delen ska vi ta en titt p\u00e5 kommandon f\u00f6r att skapa, flytta och ta bort filer.","title":"I Ragnar \u00d6stbergs anda"},{"location":"6/#skapa","text":"Som vi s\u00e5g i den f\u00f6rra delen s\u00e5 kan man skapa en fil genom redirection. M\u00e5nga saker g\u00e5r att g\u00f6ra p\u00e5 olika s\u00e4tt, tack vare hur saker \u00e4r byggda enligt Unix-filosofin. Det vanligaste s\u00e4ttet f\u00f6r att skapa en tom fil \u00e4r dock att anv\u00e4nda kommandot touch . Du beh\u00f6ver bara ange vilket filnamn du vill ha. Du beh\u00f6ver dessutom inte vara r\u00e4dd f\u00f6r att skriva \u00f6ver n\u00e5got av filens inneh\u00e5ll om du anger ett filnamn som redan existerar. Det enda som h\u00e4nder i det fallet \u00e4r att \"senast \u00e4ndrad\"-tiden uppdateras till tiden du skrev kommandot. touch filnamn.java F\u00f6r att skapa en ny katalog (som sagt tidigare, kan lika g\u00e4rna s\u00e4ga mapp), s\u00e5 anv\u00e4nder vi kommandot mkdir (make directory). Du kan skapa flera underkataloger samtidigt med -p flaggan. # Skapa en ny katalog mkdir min_javakod # Skapa flera kataloger i en f\u00f6r\u00e4lderkatalog. Den skapas ocks\u00e5 om den inte redan existerar. mkdir -p min_javakod/{src,test}","title":"Skapa"},{"location":"6/#flyttaandra","text":"F\u00f6r att flytta filer och kataloger anv\u00e4nder vi kommandot mv (move). Detta kommando anv\u00e4nds ocks\u00e5 f\u00f6r att byta namn p\u00e5 filer och kataloger. Kommandot \u00e4r v\u00e4ldigt enkelt, f\u00f6rst anger du k\u00e4llan och sedan destinationen. # Flytta en fil till en katalog mv filnamn.java min_javakod/ # Byta namn p\u00e5 en fil mv filnamn.java minjavafil.java # Flytta och byta namn samtidigt mv filnamn.java min_javakod/minjavafil.java F\u00f6r att kopiera filer anv\u00e4nder vi kommandot cp (copy). Det fungerar p\u00e5 liknande s\u00e4tt som mv . # Kopiera en fil cp filnamn.java minjavafil_kopia.java # Kopiera en fil till en annan katalog cp filnamn.java min_javakod/ # Kopiera en hel katalog och dess inneh\u00e5ll (anv\u00e4nd -r flaggan) cp -r min_javakod min_javakod_backup","title":"Flytta/\u00c4ndra"},{"location":"6/#ta-bort","text":"F\u00f6r att ta bort filer och kataloger anv\u00e4nds kommandot rm (remove). Var f\u00f6rsiktig med detta kommando eftersom filerna f\u00f6rsvinner helt och h\u00e5llet (ingen paperskorg eller liknande h\u00e4r). De flesta moderna operativsystem har skydd mot detta nu men det var till och med l\u00e4tt att ta bort allt inneh\u00e5ll fr\u00e5n en dator med ett enkelt rm -rf / kommando f\u00f6rr (/ destinationen \u00e4r roten f\u00f6r operativsystemet). # Ta bort en fil rm filnamn.java # Ta bort en katalog och allt dess inneh\u00e5ll (recursive) rm -r min_javakod # Tvinga borttagning utan varningar (-f f\u00f6r force) rm -f k\u00e4nsligfil.java # Kombinera flaggor f\u00f6r att ta bort en katalog utan varningar rm -rf k\u00e4nslig_katalog","title":"Ta bort"},{"location":"6/#sudo","text":"N\u00e4r man ska \u00e4ndra i filer utanf\u00f6r hemkatalogen eller beh\u00f6ver utf\u00f6ra n\u00e5got annat systemkritiskt s\u00e5 kommer kommandot kr\u00e4va att visa att du har admin-r\u00e4ttigheter. Om du har det s\u00e5 kan du d\u00e5 anv\u00e4nda sudo (superuser do). Ibland k\u00e4nns det som att l\u00e4gga till sudo l\u00f6ser det mesta. Men var f\u00f6rsiktig med hur du anv\u00e4nder sudo . N\u00e4r du anv\u00e4nder sudo f\u00f6r att installera n\u00e5got, exempelvis en nodejs modul, s\u00e5 ger du modulen adminbeh\u00f6righeter (den har allts\u00e5 full tillg\u00e5ng till ditt system). S\u00e5 om du inte \u00e4r s\u00e4ker p\u00e5 k\u00e4llan anv\u00e4nd inte sudo , och fundera alltid p\u00e5 varf\u00f6r n\u00e5got kr\u00e4ver sudo innan du ger den n\u00e5gra beh\u00f6righeter. # Installera ett program (exempel fr\u00e5n Ubuntu/Debian) sudo apt install programnamn # Redigera en systemfil sudo nano /etc/hosts # Ta bort en skyddad fil sudo rm /var/log/systemfil.log # Skapa en katalog i systemet sudo mkdir /opt/mittprogram","title":"Sudo"},{"location":"6/#wildcard","text":"N\u00e4r du anv\u00e4nder kommandon som inte beh\u00f6ver en specifik adress till en fil s\u00e5 kan du anv\u00e4nda ett s\u00e5 kallat 'wildcard.' S\u00e4g att du exempelvis vill ta bort alla java-filer i en mapp. rm javaprojekt/src/*.java Allt som avslutas med .java kommer att tas bort i src-katalogen i exemplet. Du kan s\u00e4tta asterisken efter lite text ocks\u00e5. # Tar bort alla filer med controller i namnet. rm javaprojekt/src/*controller* # Tar bort alla filer som b\u00f6rjar med fil rm javaprojekt/src/fil* Ett wildcard f\u00f6r ett tecken g\u00f6r man med ? . # Matchar filer som fil-1.txt och fil-A.txt men inte med fil-12.txt ls fil?.txt F\u00f6r att matcha mer \u00e4n ett tecken p\u00e5 en position kan man anv\u00e4nda []. Ranges f\u00f6r b\u00e5de bokst\u00e4ver och siffror fungerar. Du kan \u00e4ven matcha med tecken som inte finns med ett !. # Listar alla txt-filer som b\u00f6rjar med fil1, fil2 eller fil3. fil4 inkluderas exempelvis inte. ls fil[1-3].txt # Samma sak med bokst\u00e4ver. ls fil[a-c].txt # Om jag vill lista alla txt-filer f\u00f6rutom 1 till 3. ls fil[!1-3].txt Man kan \u00e4ven kombinera olika wildcards. ls -l [A-C]*.java listar alla java-filer som b\u00f6rjar p\u00e5 A till C.","title":"Wildcard"},{"location":"6/#allmana-tips","text":"Du kanske har noterat att tecken som ! och ? kan vara symboler du vill anv\u00e4nda i text. S\u00e4g att vi skulle haft Hello world! i den f\u00f6rsta uppgiften ist\u00e4llet f\u00f6r Hello world d\u00e5 hade man varit tvungen att anv\u00e4nda ett escape-tecken (\\) och skriva det s\u00e5 h\u00e4r export greeting=Hello world\\! . Ett annat litet tips \u00e4r att du kan kombinera kommandon genom att skriva &&. H\u00e4r under s\u00e5 flyttar jag mig till hemkatalogen och skapar katalogen 'nytt' i den p\u00e5 en och samma rad. cd ~ && mkdir nytt","title":"Allm\u00e4na tips"},{"location":"6/#uppgift","text":"Starta genom bash test.sh som vanligt.","title":"Uppgift"},{"location":"7/","text":"Mario Bros. Nu ska vi komma ig\u00e5ng med lite r\u00f6rmokarjobb. Vi hoppar vidare till Uppgifter/5 . Piping I terminalen s\u00e5 kan man skicka vidare data och kedja ihop det med andra kommandon. Det som anv\u00e4nds f\u00f6r att kedja ihop kommandon \u00e4r det s\u00e5 kallade pipe-tecknet | . Vi tar och tittar p\u00e5 ett par exempel. # Se hur m\u00e5nga filer det finns i en katalog # Listar alla filer och skickar det vidare till wc som r\u00e4knar rader ls -a | wc -l # Kombinera tv\u00e5 filers data, sortera, beh\u00e5ll endast unika och skapa sedan en fil med datan cat email1.txt email2.txt | sort | uniq > combined_emails.txt Som du kanske ser s\u00e5 kan man kedja ihop fler \u00e4n tv\u00e5 kommandon. Du kan kedja p\u00e5 hur mycket du vill och k\u00e4nner f\u00f6r. Fl\u00f6det i en s\u00e5dan h\u00e4r kedja g\u00e5r alltid fr\u00e5n v\u00e4nster till h\u00f6ger, precis som en stream i Java. grep Det h\u00e4r \u00e4r ett kommando som \u00e4r perfekt till kedjanden. T\u00e4nk dig att du anv\u00e4nder en funktion som fungerar som en Ctrl + F i Windows men har m\u00e5nga fler funktioner du kan l\u00e4gga p\u00e5 med flaggor. grep anv\u00e4nder sig av regex och det \u00e4r ocks\u00e5 vad re i kommandot st\u00e5r f\u00f6r, g:et \u00e4r f\u00f6r global och p:et f\u00f6r print. Du kan s\u00f6ka i filer och output fr\u00e5n andra kommandon vilket g\u00f6r det v\u00e4ldigt anv\u00e4ndbart f\u00f6r piping. # Skriver ut alla filer som inneh\u00e5ller 'test' fr\u00e5n listan ls -l | grep test # Skriver ut alla rader med ordet 'hej' i fil.txt grep hej fil.txt # Skriver ut alla rader med ordet 'hej' i all txt-filer grep hej *.txt Ett par anv\u00e4ndbara flaggor f\u00f6r grep , \u00e4r -c som r\u00e4knar hur m\u00e5nga g\u00e5nger n\u00e5got f\u00f6rekommer och -i som ignorerar versaler/gemener. En annan nyttig flagga \u00e4r -r som g\u00f6r s\u00f6kningen rekursivt, grep -r hej . s\u00f6ker igenom alla filer i katalogen du befinner dig i. find Ytterligare ett kommando som \u00e4r v\u00e4ldigt anv\u00e4ndbart. Som namnet antyder s\u00e5 hj\u00e4lper kommandot dig att hitta filer och kataloger i ditt system. Du kan s\u00f6ka p\u00e5 parametrar som namn, storlek, typ, \u00e5lder, \u00e4gare etc. # S\u00f6ker genom katalogen du \u00e4r i och alla underkataloger till den efter en fil med namnet 'fil1.txt' find . -name \"fil1.txt\" # S\u00f6ker igenom hemkatalogen och alla dess underkataloger efter alla HTML-filer find ~ -name \"*.html\" # S\u00f6ker igenom hemkatalogen och dess direkta underkataloger (ett steg) efter alla HTML-filer find ~ -maxdepth 2 -name \"*.html\" # S\u00f6ker igenom hela systemet efter alla filer (f f\u00f6r filer, d f\u00f6r kataloger) find / -type f # S\u00f6ker igenom din nuvarande katalog och underkataloger efter filer som \u00e4r st\u00f6rre \u00e4n 500mb. find . -size +500m Det finns flera s\u00f6kalternativ \u00e4n det h\u00e4r. Kika g\u00e4rna p\u00e5 manualen om det \u00e4r n\u00e5got du beh\u00f6ver s\u00f6ka p\u00e5 men du inte riktigt \u00e4r s\u00e4ker p\u00e5 hur. Mer om manualer nedan. man De flesta kommandon har en manual och den n\u00e5r du med det h\u00e4r kommandot. Hj\u00e4lp-flaggan (--help) kan ofta ge dig svar p\u00e5 vad olika flaggor g\u00f6r men om du vill ha mer utf\u00f6rlig information s\u00e5 \u00e4r det h\u00e4r kommandot du vill anv\u00e4nda dig av. Du har kanske h\u00f6rt uttrycket RTFM (Read the friggin' manual), och det \u00e4r n\u00e5got jag rekommenderar att du g\u00f6r om du har fr\u00e5gor kring ett kommando. Du kan \u00e4ven anv\u00e4nda grep om du s\u00f6ker efter en speciell del, alternativt g\u00e5 in i manualen och s\u00f6ka p\u00e5 n\u00e5got genom att f\u00f6rst trycka / och sen skriva s\u00f6kordet. Om du g\u00f6r en /-s\u00f6kning s\u00e5 tar du dig till n\u00e4sta tr\u00e4ff genom att trycka p\u00e5 'n'. Du tar dig ur manualen genom att trycka p\u00e5 'q'. kill Ibland beh\u00f6ver du d\u00f6da/avsluta processer. Det l\u00e4ttaste s\u00e4ttet att g\u00f6ra det p\u00e5 \u00e4r ofta att anv\u00e4nda kortkommandot ctrl + c i terminalen. Ctrl + c \u00e4r n\u00e5got som \u00e4r bra att l\u00e4gga p\u00e5 minnet, s\u00e4g till exempel att du vill avsluta processen som k\u00f6r en server eller liknande. Ibland g\u00e5r det dock inte att avsluta processer med det kortkommandot och d\u00e5 anv\u00e4nder man sig av kill . Kill kan avsluta processer p\u00e5 olika s\u00e4ttet. # Skickar en signal som ber n\u00e5got att avsluta (SIGTERM) kill PID # Skickar en 'interrupt'-signal. Samma sak som ctrl + c (SIGINT) kill -2 PID # Forcerat avslut. Kan inte ignoreras och d\u00f6dar processen direkt. (SIGKILL) kill -9 PID PID som anv\u00e4nds ovan \u00e4r en process ID. Du kan f\u00e5 tag p\u00e5 processers ID genom att anv\u00e4nda ps -kommandot. Om du likt aktivitetshanteraren i Windows vill ha en lista p\u00e5 alla processer s\u00e5 kan du skriva ps aux , vilket \u00e4r superbra att kombinera med ett visst grep kommando f\u00f6r att f\u00e5 fram processen du \u00e4r intresserad av. Uppgift bash test.sh","title":"7 - Mario Bros."},{"location":"7/#mario-bros","text":"Nu ska vi komma ig\u00e5ng med lite r\u00f6rmokarjobb. Vi hoppar vidare till Uppgifter/5 .","title":"Mario Bros."},{"location":"7/#piping","text":"I terminalen s\u00e5 kan man skicka vidare data och kedja ihop det med andra kommandon. Det som anv\u00e4nds f\u00f6r att kedja ihop kommandon \u00e4r det s\u00e5 kallade pipe-tecknet | . Vi tar och tittar p\u00e5 ett par exempel. # Se hur m\u00e5nga filer det finns i en katalog # Listar alla filer och skickar det vidare till wc som r\u00e4knar rader ls -a | wc -l # Kombinera tv\u00e5 filers data, sortera, beh\u00e5ll endast unika och skapa sedan en fil med datan cat email1.txt email2.txt | sort | uniq > combined_emails.txt Som du kanske ser s\u00e5 kan man kedja ihop fler \u00e4n tv\u00e5 kommandon. Du kan kedja p\u00e5 hur mycket du vill och k\u00e4nner f\u00f6r. Fl\u00f6det i en s\u00e5dan h\u00e4r kedja g\u00e5r alltid fr\u00e5n v\u00e4nster till h\u00f6ger, precis som en stream i Java.","title":"Piping"},{"location":"7/#grep","text":"Det h\u00e4r \u00e4r ett kommando som \u00e4r perfekt till kedjanden. T\u00e4nk dig att du anv\u00e4nder en funktion som fungerar som en Ctrl + F i Windows men har m\u00e5nga fler funktioner du kan l\u00e4gga p\u00e5 med flaggor. grep anv\u00e4nder sig av regex och det \u00e4r ocks\u00e5 vad re i kommandot st\u00e5r f\u00f6r, g:et \u00e4r f\u00f6r global och p:et f\u00f6r print. Du kan s\u00f6ka i filer och output fr\u00e5n andra kommandon vilket g\u00f6r det v\u00e4ldigt anv\u00e4ndbart f\u00f6r piping. # Skriver ut alla filer som inneh\u00e5ller 'test' fr\u00e5n listan ls -l | grep test # Skriver ut alla rader med ordet 'hej' i fil.txt grep hej fil.txt # Skriver ut alla rader med ordet 'hej' i all txt-filer grep hej *.txt Ett par anv\u00e4ndbara flaggor f\u00f6r grep , \u00e4r -c som r\u00e4knar hur m\u00e5nga g\u00e5nger n\u00e5got f\u00f6rekommer och -i som ignorerar versaler/gemener. En annan nyttig flagga \u00e4r -r som g\u00f6r s\u00f6kningen rekursivt, grep -r hej . s\u00f6ker igenom alla filer i katalogen du befinner dig i.","title":"grep"},{"location":"7/#find","text":"Ytterligare ett kommando som \u00e4r v\u00e4ldigt anv\u00e4ndbart. Som namnet antyder s\u00e5 hj\u00e4lper kommandot dig att hitta filer och kataloger i ditt system. Du kan s\u00f6ka p\u00e5 parametrar som namn, storlek, typ, \u00e5lder, \u00e4gare etc. # S\u00f6ker genom katalogen du \u00e4r i och alla underkataloger till den efter en fil med namnet 'fil1.txt' find . -name \"fil1.txt\" # S\u00f6ker igenom hemkatalogen och alla dess underkataloger efter alla HTML-filer find ~ -name \"*.html\" # S\u00f6ker igenom hemkatalogen och dess direkta underkataloger (ett steg) efter alla HTML-filer find ~ -maxdepth 2 -name \"*.html\" # S\u00f6ker igenom hela systemet efter alla filer (f f\u00f6r filer, d f\u00f6r kataloger) find / -type f # S\u00f6ker igenom din nuvarande katalog och underkataloger efter filer som \u00e4r st\u00f6rre \u00e4n 500mb. find . -size +500m Det finns flera s\u00f6kalternativ \u00e4n det h\u00e4r. Kika g\u00e4rna p\u00e5 manualen om det \u00e4r n\u00e5got du beh\u00f6ver s\u00f6ka p\u00e5 men du inte riktigt \u00e4r s\u00e4ker p\u00e5 hur. Mer om manualer nedan.","title":"find"},{"location":"7/#man","text":"De flesta kommandon har en manual och den n\u00e5r du med det h\u00e4r kommandot. Hj\u00e4lp-flaggan (--help) kan ofta ge dig svar p\u00e5 vad olika flaggor g\u00f6r men om du vill ha mer utf\u00f6rlig information s\u00e5 \u00e4r det h\u00e4r kommandot du vill anv\u00e4nda dig av. Du har kanske h\u00f6rt uttrycket RTFM (Read the friggin' manual), och det \u00e4r n\u00e5got jag rekommenderar att du g\u00f6r om du har fr\u00e5gor kring ett kommando. Du kan \u00e4ven anv\u00e4nda grep om du s\u00f6ker efter en speciell del, alternativt g\u00e5 in i manualen och s\u00f6ka p\u00e5 n\u00e5got genom att f\u00f6rst trycka / och sen skriva s\u00f6kordet. Om du g\u00f6r en /-s\u00f6kning s\u00e5 tar du dig till n\u00e4sta tr\u00e4ff genom att trycka p\u00e5 'n'. Du tar dig ur manualen genom att trycka p\u00e5 'q'.","title":"man"},{"location":"7/#kill","text":"Ibland beh\u00f6ver du d\u00f6da/avsluta processer. Det l\u00e4ttaste s\u00e4ttet att g\u00f6ra det p\u00e5 \u00e4r ofta att anv\u00e4nda kortkommandot ctrl + c i terminalen. Ctrl + c \u00e4r n\u00e5got som \u00e4r bra att l\u00e4gga p\u00e5 minnet, s\u00e4g till exempel att du vill avsluta processen som k\u00f6r en server eller liknande. Ibland g\u00e5r det dock inte att avsluta processer med det kortkommandot och d\u00e5 anv\u00e4nder man sig av kill . Kill kan avsluta processer p\u00e5 olika s\u00e4ttet. # Skickar en signal som ber n\u00e5got att avsluta (SIGTERM) kill PID # Skickar en 'interrupt'-signal. Samma sak som ctrl + c (SIGINT) kill -2 PID # Forcerat avslut. Kan inte ignoreras och d\u00f6dar processen direkt. (SIGKILL) kill -9 PID PID som anv\u00e4nds ovan \u00e4r en process ID. Du kan f\u00e5 tag p\u00e5 processers ID genom att anv\u00e4nda ps -kommandot. Om du likt aktivitetshanteraren i Windows vill ha en lista p\u00e5 alla processer s\u00e5 kan du skriva ps aux , vilket \u00e4r superbra att kombinera med ett visst grep kommando f\u00f6r att f\u00e5 fram processen du \u00e4r intresserad av.","title":"kill"},{"location":"7/#uppgift","text":"bash test.sh","title":"Uppgift"},{"location":"8/","text":"Permission required I 4 - Alla dessa flaggor... sa vi att r\u00e4ttigheter \u00e4r n\u00e5got vi kommer att g\u00e5 igenom senare. Nu \u00e4r senare. Hoppa in i Uppgifter/6 . R\u00e4ttigheter \u00e4r en viktig del av s\u00e4kerhetssystemet. Det kan f\u00f6rhindra anv\u00e4ndare att av misstag \u00e4ndra eller radera viktiga systemfiler eller att obeh\u00f6riga kommer \u00e5t information de inte ska ha tillg\u00e5ng till. Det h\u00e4r \u00e4r ocks\u00e5 anledningen till att sudo m\u00e5ste anv\u00e4ndas n\u00e4r du ska g\u00f6ra \u00e4ndringar p\u00e5 filer utanf\u00f6r hemkatalogen (endast root-anv\u00e4ndare kan g\u00f6ra dessa \u00e4ndringar). I Linux s\u00e5 kan du se r\u00e4ttigheter f\u00f6r en fil eller katalog genom att anv\u00e4nda ls -la . Det \u00e4r en 10-tecken l\u00e5ng str\u00e4ng, den kan exempelvis se ut s\u00e5 h\u00e4r: drwx------ Det f\u00f6rsta tecknet indikerar om det \u00e4r en fil eller katalog. Om det \u00e4r en fil s\u00e5 \u00e4r f\u00f6rsta tecknet - och om det \u00e4r en katalog d . De nio n\u00e4stkommande tecken \u00e4r tre upps\u00e4ttningar av rwx. Om det finns ett - tecken p\u00e5 de efterf\u00f6ljande nio betyder det att r\u00e4ttigheten saknas. r st\u00e5r f\u00f6r Read w st\u00e5r f\u00f6r Write x f\u00f6r Execute De tre upps\u00e4ttningarna \u00e4r, i ordning: \u00e4gare, grupp och \u00f6vriga. Baserat p\u00e5 vilken av dessa tre man \u00e4r en del av avg\u00f6r om du kan l\u00e4sa, skriva eller k\u00f6ra en fil. I exemplet ovan s\u00e5 har endast \u00e4garen fulla r\u00e4ttigheter f\u00f6r katalogen och ingen av de andra grupperna kan g\u00f6ra n\u00e5got med den. chmod Det h\u00e4r \u00e4r ett kommando som till\u00e5ter dig att \u00e4ndra r\u00e4ttigheter f\u00f6r en fil eller katalog. Syntaxet kan skrivas p\u00e5 lite olika s\u00e4tt. Upps\u00e4ttningarna f\u00f6rkortas till ugo (user (\u00e4garen), group, others) # L\u00e4gga till execute f\u00f6r user chmod u+x filen.txt # Ta bort write f\u00f6r others chmod o-r filen.txt # L\u00e4gga till read f\u00f6r alla upps\u00e4ttningarna chmod +r filen.txt Man kan \u00e4ven \u00e4ndra p\u00e5 r\u00e4ttigheterna med siffror. x = 1, w = 2 och r = 4. Addera siffrorna f\u00f6r varje upps\u00e4ttning. S\u00e5 om jag vill att alla ska ha fulla r\u00e4ttigheter till en fil kan jag skriva chmod 777 filen.txt . Alternativt kanske jag vill ha fulla r\u00e4ttigheter f\u00f6r \u00e4garen men inga r\u00e4ttigheter f\u00f6r others och att group bara ska kunna l\u00e4sa, d\u00e5 kan jag skriva chmod 720 filen.txt . chown Detta kommando kr\u00e4ver att du \u00e4r super-user s\u00e5 sudo kommer att efterfr\u00e5gas. Det kommandot g\u00f6r \u00e4r att \u00e4ndra \u00e4gare av en fil eller katalog. # \u00c4ndra \u00e4gare sudo chown ny_\u00e4gare filnamn # \u00c4ndra b\u00e5de \u00e4gare och grupp sudo chown ny_\u00e4gare:ny_grupp filnamn # \u00c4ndra endast grupp sudo chown :ny_grupp filnamn Uppgift Starta uppgiften med bash test.sh","title":"8 - Permission required"},{"location":"8/#permission-required","text":"I 4 - Alla dessa flaggor... sa vi att r\u00e4ttigheter \u00e4r n\u00e5got vi kommer att g\u00e5 igenom senare. Nu \u00e4r senare. Hoppa in i Uppgifter/6 . R\u00e4ttigheter \u00e4r en viktig del av s\u00e4kerhetssystemet. Det kan f\u00f6rhindra anv\u00e4ndare att av misstag \u00e4ndra eller radera viktiga systemfiler eller att obeh\u00f6riga kommer \u00e5t information de inte ska ha tillg\u00e5ng till. Det h\u00e4r \u00e4r ocks\u00e5 anledningen till att sudo m\u00e5ste anv\u00e4ndas n\u00e4r du ska g\u00f6ra \u00e4ndringar p\u00e5 filer utanf\u00f6r hemkatalogen (endast root-anv\u00e4ndare kan g\u00f6ra dessa \u00e4ndringar). I Linux s\u00e5 kan du se r\u00e4ttigheter f\u00f6r en fil eller katalog genom att anv\u00e4nda ls -la . Det \u00e4r en 10-tecken l\u00e5ng str\u00e4ng, den kan exempelvis se ut s\u00e5 h\u00e4r: drwx------ Det f\u00f6rsta tecknet indikerar om det \u00e4r en fil eller katalog. Om det \u00e4r en fil s\u00e5 \u00e4r f\u00f6rsta tecknet - och om det \u00e4r en katalog d . De nio n\u00e4stkommande tecken \u00e4r tre upps\u00e4ttningar av rwx. Om det finns ett - tecken p\u00e5 de efterf\u00f6ljande nio betyder det att r\u00e4ttigheten saknas. r st\u00e5r f\u00f6r Read w st\u00e5r f\u00f6r Write x f\u00f6r Execute De tre upps\u00e4ttningarna \u00e4r, i ordning: \u00e4gare, grupp och \u00f6vriga. Baserat p\u00e5 vilken av dessa tre man \u00e4r en del av avg\u00f6r om du kan l\u00e4sa, skriva eller k\u00f6ra en fil. I exemplet ovan s\u00e5 har endast \u00e4garen fulla r\u00e4ttigheter f\u00f6r katalogen och ingen av de andra grupperna kan g\u00f6ra n\u00e5got med den.","title":"Permission required"},{"location":"8/#chmod","text":"Det h\u00e4r \u00e4r ett kommando som till\u00e5ter dig att \u00e4ndra r\u00e4ttigheter f\u00f6r en fil eller katalog. Syntaxet kan skrivas p\u00e5 lite olika s\u00e4tt. Upps\u00e4ttningarna f\u00f6rkortas till ugo (user (\u00e4garen), group, others) # L\u00e4gga till execute f\u00f6r user chmod u+x filen.txt # Ta bort write f\u00f6r others chmod o-r filen.txt # L\u00e4gga till read f\u00f6r alla upps\u00e4ttningarna chmod +r filen.txt Man kan \u00e4ven \u00e4ndra p\u00e5 r\u00e4ttigheterna med siffror. x = 1, w = 2 och r = 4. Addera siffrorna f\u00f6r varje upps\u00e4ttning. S\u00e5 om jag vill att alla ska ha fulla r\u00e4ttigheter till en fil kan jag skriva chmod 777 filen.txt . Alternativt kanske jag vill ha fulla r\u00e4ttigheter f\u00f6r \u00e4garen men inga r\u00e4ttigheter f\u00f6r others och att group bara ska kunna l\u00e4sa, d\u00e5 kan jag skriva chmod 720 filen.txt .","title":"chmod"},{"location":"8/#chown","text":"Detta kommando kr\u00e4ver att du \u00e4r super-user s\u00e5 sudo kommer att efterfr\u00e5gas. Det kommandot g\u00f6r \u00e4r att \u00e4ndra \u00e4gare av en fil eller katalog. # \u00c4ndra \u00e4gare sudo chown ny_\u00e4gare filnamn # \u00c4ndra b\u00e5de \u00e4gare och grupp sudo chown ny_\u00e4gare:ny_grupp filnamn # \u00c4ndra endast grupp sudo chown :ny_grupp filnamn","title":"chown"},{"location":"8/#uppgift","text":"Starta uppgiften med bash test.sh","title":"Uppgift"},{"location":"9/","text":"Vad kommer h\u00e4rn\u00e4st? Vi har bara skrapat lite p\u00e5 ytan n\u00e4r det kommer till kommandon i terminalen. S\u00e5 hur b\u00f6r man forts\u00e4tta? Linux-strukturen Jag rekommenderar att du f\u00f6rst kikar p\u00e5 hur strukturen ser ut i Linux. Det beh\u00f6ver inte vara s\u00e5 ing\u00e5ende, utan endast f\u00f6r att f\u00e5 lite \u00f6vergripande kunskap. Titta exempelvis p\u00e5 en kort video som den h\u00e4r: Fireship - Linux Directories Explained in 100 seconds Praktisk \u00f6vning Om du vill testa p\u00e5 fler kommandon i mer avancerade milj\u00f6er s\u00e5 kan jag rekommendera att testa s\u00e5 kallade CTFs (Capture the Flag). Bandit \u00e4r en nyb\u00f6rjarv\u00e4nlig version med m\u00e5nga niv\u00e5er. Du m\u00e5ste exempelvis l\u00e4ra dig hur du ansluter till en annan dator med SSH f\u00f6r att starta. Men mitt b\u00e4sta r\u00e5d \u00e4r bara att b\u00f6rja anv\u00e4nda terminalen mer i vardagen. Ju mer du exponeras f\u00f6r och experimenterar med saker, desto mer kommer du l\u00e4ra dig. Tack \u2764\ufe0f Om du kom s\u00e5 h\u00e4r l\u00e5ngt - tack f\u00f6r att du l\u00e4ste och hoppas det bidrog med n\u00e5got!","title":"9 - Vad kommer h\u00e4rn\u00e4st?"},{"location":"9/#vad-kommer-harnast","text":"Vi har bara skrapat lite p\u00e5 ytan n\u00e4r det kommer till kommandon i terminalen. S\u00e5 hur b\u00f6r man forts\u00e4tta?","title":"Vad kommer h\u00e4rn\u00e4st?"},{"location":"9/#linux-strukturen","text":"Jag rekommenderar att du f\u00f6rst kikar p\u00e5 hur strukturen ser ut i Linux. Det beh\u00f6ver inte vara s\u00e5 ing\u00e5ende, utan endast f\u00f6r att f\u00e5 lite \u00f6vergripande kunskap. Titta exempelvis p\u00e5 en kort video som den h\u00e4r: Fireship - Linux Directories Explained in 100 seconds","title":"Linux-strukturen"},{"location":"9/#praktisk-ovning","text":"Om du vill testa p\u00e5 fler kommandon i mer avancerade milj\u00f6er s\u00e5 kan jag rekommendera att testa s\u00e5 kallade CTFs (Capture the Flag). Bandit \u00e4r en nyb\u00f6rjarv\u00e4nlig version med m\u00e5nga niv\u00e5er. Du m\u00e5ste exempelvis l\u00e4ra dig hur du ansluter till en annan dator med SSH f\u00f6r att starta. Men mitt b\u00e4sta r\u00e5d \u00e4r bara att b\u00f6rja anv\u00e4nda terminalen mer i vardagen. Ju mer du exponeras f\u00f6r och experimenterar med saker, desto mer kommer du l\u00e4ra dig.","title":"Praktisk \u00f6vning"},{"location":"9/#tack","text":"Om du kom s\u00e5 h\u00e4r l\u00e5ngt - tack f\u00f6r att du l\u00e4ste och hoppas det bidrog med n\u00e5got!","title":"Tack \u2764\ufe0f"}]}