{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Start Terminalen \u00e4r det mest effektiva s\u00e4ttet att anv\u00e4nda Linux. I den h\u00e4r lilla uppgiften t\u00e4nkte jag g\u00e5 igenom de grundl\u00e4ggande kommandona f\u00f6r att ta sig runt och interagera med systemet. Innan du b\u00f6rjar se till att du har Git installerat. Tryck p\u00e5 'Next' eller navigera i menyn till v\u00e4nster f\u00f6r att ta dig vidare.","title":"Start"},{"location":"#start","text":"Terminalen \u00e4r det mest effektiva s\u00e4ttet att anv\u00e4nda Linux. I den h\u00e4r lilla uppgiften t\u00e4nkte jag g\u00e5 igenom de grundl\u00e4ggande kommandona f\u00f6r att ta sig runt och interagera med systemet. Innan du b\u00f6rjar se till att du har Git installerat. Tryck p\u00e5 'Next' eller navigera i menyn till v\u00e4nster f\u00f6r att ta dig vidare.","title":"Start"},{"location":"1/","text":"Shells Vad \u00e4r en terminal? Det \u00e4r ett program som tar emot text-baserade kommandon och kan visa text p\u00e5 sk\u00e4rmen. Programmet som tolkar och k\u00f6r kommandona fr\u00e5n terminalen \u00e4r ett s\u00e5 kallat 'shell'. I Linux-system \u00e4r Bash det vanligaste shell-programmet, men Zsh (Z shell) anv\u00e4nds ocks\u00e5 mycket och \u00e4r \u00e4ven standard i Apple-milj\u00f6er. F\u00f6r att se vilket shell-program ditt system anv\u00e4nder sig av skriv detta kommando i din terminal. echo $SHELL I nul\u00e4get beh\u00f6ver du inte t\u00e4nka allt f\u00f6r mycket p\u00e5 dessa shell-filer annat \u00e4n veta att det \u00e4r dessa som k\u00f6r terminalen och att uppgifterna kommer anv\u00e4nda sig av shell-scripts.","title":"1 - Shells"},{"location":"1/#shells","text":"Vad \u00e4r en terminal? Det \u00e4r ett program som tar emot text-baserade kommandon och kan visa text p\u00e5 sk\u00e4rmen. Programmet som tolkar och k\u00f6r kommandona fr\u00e5n terminalen \u00e4r ett s\u00e5 kallat 'shell'. I Linux-system \u00e4r Bash det vanligaste shell-programmet, men Zsh (Z shell) anv\u00e4nds ocks\u00e5 mycket och \u00e4r \u00e4ven standard i Apple-milj\u00f6er. F\u00f6r att se vilket shell-program ditt system anv\u00e4nder sig av skriv detta kommando i din terminal. echo $SHELL I nul\u00e4get beh\u00f6ver du inte t\u00e4nka allt f\u00f6r mycket p\u00e5 dessa shell-filer annat \u00e4n veta att det \u00e4r dessa som k\u00f6r terminalen och att uppgifterna kommer anv\u00e4nda sig av shell-scripts.","title":"Shells"},{"location":"2/","text":"L\u00e5t oss s\u00e4tta ig\u00e5ng! F\u00f6rst och fr\u00e4mst, klona repot med uppgifter. git clone https://github.com/berberapan/qc-terminal N\u00e4r du anv\u00e4nder kommandot ovan s\u00e5 klonar du repot till det directory du befinner dig i. I Linux s\u00e5 \u00e4r hemkatalogens adress /home/(ditt anv\u00e4ndarnamn) . Du kan se var du befinner dig i nul\u00e4get genom att anv\u00e4nda kommandot pwd (print working directory). pwd # visar exempelvis /home/anv\u00e4ndare N\u00e4r qc-terminal \u00e4r klonat s\u00e5 g\u00e5 in i repot. F\u00f6r att g\u00f6ra det s\u00e5 anv\u00e4nder man sig av en av de mest anv\u00e4nda kommandona cd (change directory). Sidosp\u00e5r: I Linux s\u00e5 anv\u00e4nds kataloger (directories). En katalog \u00e4r i princip samma sak som en mapp i Windows. Skriv cd f\u00f6ljt av ditt du vill g\u00e5. F\u00f6r att g\u00e5 tillbaka ett steg anv\u00e4nder du destinationen .. (dubbla punkter). En enkel punkt \u00e4r din nuvarande position. F\u00f6r att g\u00e5 direkt till hemkatalogen kan du anv\u00e4nda en tilde '~' som destination. cd katalognamn # G\u00e5 in i en katalog cd .. # G\u00e5 tillbaka ett steg cd ~ # G\u00e5 direkt till hemkatalogen cd ~/Downloads # G\u00e5 till Downloads i hemkatalogen Tips: Om du trycker p\u00e5 tab-knappen s\u00e5 auto-completas destinationen om systemet kan hitta den. Uppgift Orientera dig till Uppgifter/1 i repot du klonade ner och g\u00e5 sedan till n\u00e4sta sida. (Om du har sv\u00e5rt att hitta kan du se vad som finns i nuvarande katalog genom att skriva ls , mer om det kommandot senare)","title":"2 - L\u00e5t oss s\u00e4tta ig\u00e5ng!"},{"location":"2/#lat-oss-satta-igang","text":"F\u00f6rst och fr\u00e4mst, klona repot med uppgifter. git clone https://github.com/berberapan/qc-terminal N\u00e4r du anv\u00e4nder kommandot ovan s\u00e5 klonar du repot till det directory du befinner dig i. I Linux s\u00e5 \u00e4r hemkatalogens adress /home/(ditt anv\u00e4ndarnamn) . Du kan se var du befinner dig i nul\u00e4get genom att anv\u00e4nda kommandot pwd (print working directory). pwd # visar exempelvis /home/anv\u00e4ndare N\u00e4r qc-terminal \u00e4r klonat s\u00e5 g\u00e5 in i repot. F\u00f6r att g\u00f6ra det s\u00e5 anv\u00e4nder man sig av en av de mest anv\u00e4nda kommandona cd (change directory). Sidosp\u00e5r: I Linux s\u00e5 anv\u00e4nds kataloger (directories). En katalog \u00e4r i princip samma sak som en mapp i Windows. Skriv cd f\u00f6ljt av ditt du vill g\u00e5. F\u00f6r att g\u00e5 tillbaka ett steg anv\u00e4nder du destinationen .. (dubbla punkter). En enkel punkt \u00e4r din nuvarande position. F\u00f6r att g\u00e5 direkt till hemkatalogen kan du anv\u00e4nda en tilde '~' som destination. cd katalognamn # G\u00e5 in i en katalog cd .. # G\u00e5 tillbaka ett steg cd ~ # G\u00e5 direkt till hemkatalogen cd ~/Downloads # G\u00e5 till Downloads i hemkatalogen Tips: Om du trycker p\u00e5 tab-knappen s\u00e5 auto-completas destinationen om systemet kan hitta den.","title":"L\u00e5t oss s\u00e4tta ig\u00e5ng!"},{"location":"2/#uppgift","text":"Orientera dig till Uppgifter/1 i repot du klonade ner och g\u00e5 sedan till n\u00e4sta sida. (Om du har sv\u00e5rt att hitta kan du se vad som finns i nuvarande katalog genom att skriva ls , mer om det kommandot senare)","title":"Uppgift"},{"location":"3/","text":"Echoes of wisdom Vi borde nu befinna oss i Uppgifter/1 . F\u00f6rs\u00e4kra dig att s\u00e5 \u00e4r fallet genom att skriva pwd . P\u00e5 f\u00f6rsta sidan anv\u00e4nde vi echo -kommandot f\u00f6r att se vilket shell-program som anv\u00e4ndes, men vi gick inte in p\u00e5 vad echo \u00e4r. Echo \u00e4r ett simpelt kommando som returnerar text. Om du anger en fil s\u00e5 returneras filnamnet, om du anger en str\u00e4ng s\u00e5 returneras den. N\u00e4r vi kollade p\u00e5 vilket shell-program som anv\u00e4ndes s\u00e5 anv\u00e4nde vi echo $SHELL . H\u00e4r \u00e4r $SHELL en variabel som inneh\u00e5ller s\u00f6kv\u00e4gen till den shell som terminalen anv\u00e4nder. Du kan skapa dina egna variabler i terminalen. F\u00f6r att variabeln ska finnas i shell-milj\u00f6n s\u00e5 m\u00e5ste export anv\u00e4ndas n\u00e4r du skapar den. export min_variabel=\"super\" echo $min_variabel # Skriver ut super Uppgift Skapa en variabel med namn greeting och ge den v\u00e4rdet \"Hello world!\". N\u00e4r du \u00e4r klar k\u00f6r: bash test.sh Detta kommer kontrollera att v\u00e4rdet \u00e4r korrekt (kr\u00e4ver att du \u00e4r i Uppgifter/1). Om den ger gr\u00f6nt, g\u00e5 till n\u00e4sta sida. Extra info Varje ny terminal-session startar i en ny milj\u00f6, vilket betyder att dina variabler inte finns kvar fr\u00e5n f\u00f6rra sessionen. Om du vill att en variabel alltid ska finnas tillg\u00e4nglig m\u00e5ste export-kommandot k\u00f6ras varje g\u00e5ng du loggar in. Detta kan automatiseras genom att l\u00e4gga till kommandot i shell-programmets inst\u00e4llningsfil. Om du \u00e4r nyfiken kan du titta p\u00e5 denna inst\u00e4llningsfil (en s\u00e5 kallad dotfil) som ligger dold i din hemkatalog. F\u00f6r bash-anv\u00e4ndare: cat ~/.bashrc Detta \u00e4r s\u00e4rskilt anv\u00e4ndbart n\u00e4r man till exempel vill l\u00e4gga till program i systemets PATH.","title":"3 - Echoes of wisdom"},{"location":"3/#echoes-of-wisdom","text":"Vi borde nu befinna oss i Uppgifter/1 . F\u00f6rs\u00e4kra dig att s\u00e5 \u00e4r fallet genom att skriva pwd . P\u00e5 f\u00f6rsta sidan anv\u00e4nde vi echo -kommandot f\u00f6r att se vilket shell-program som anv\u00e4ndes, men vi gick inte in p\u00e5 vad echo \u00e4r. Echo \u00e4r ett simpelt kommando som returnerar text. Om du anger en fil s\u00e5 returneras filnamnet, om du anger en str\u00e4ng s\u00e5 returneras den. N\u00e4r vi kollade p\u00e5 vilket shell-program som anv\u00e4ndes s\u00e5 anv\u00e4nde vi echo $SHELL . H\u00e4r \u00e4r $SHELL en variabel som inneh\u00e5ller s\u00f6kv\u00e4gen till den shell som terminalen anv\u00e4nder. Du kan skapa dina egna variabler i terminalen. F\u00f6r att variabeln ska finnas i shell-milj\u00f6n s\u00e5 m\u00e5ste export anv\u00e4ndas n\u00e4r du skapar den. export min_variabel=\"super\" echo $min_variabel # Skriver ut super","title":"Echoes of wisdom"},{"location":"3/#uppgift","text":"Skapa en variabel med namn greeting och ge den v\u00e4rdet \"Hello world!\". N\u00e4r du \u00e4r klar k\u00f6r: bash test.sh Detta kommer kontrollera att v\u00e4rdet \u00e4r korrekt (kr\u00e4ver att du \u00e4r i Uppgifter/1). Om den ger gr\u00f6nt, g\u00e5 till n\u00e4sta sida.","title":"Uppgift"},{"location":"3/#extra-info","text":"Varje ny terminal-session startar i en ny milj\u00f6, vilket betyder att dina variabler inte finns kvar fr\u00e5n f\u00f6rra sessionen. Om du vill att en variabel alltid ska finnas tillg\u00e4nglig m\u00e5ste export-kommandot k\u00f6ras varje g\u00e5ng du loggar in. Detta kan automatiseras genom att l\u00e4gga till kommandot i shell-programmets inst\u00e4llningsfil. Om du \u00e4r nyfiken kan du titta p\u00e5 denna inst\u00e4llningsfil (en s\u00e5 kallad dotfil) som ligger dold i din hemkatalog. F\u00f6r bash-anv\u00e4ndare: cat ~/.bashrc Detta \u00e4r s\u00e4rskilt anv\u00e4ndbart n\u00e4r man till exempel vill l\u00e4gga till program i systemets PATH.","title":"Extra info"},{"location":"4/","text":"Alla dessa flaggor... G\u00e5 nu till Uppgifter/2 . Tips cd ../2 Innan vi g\u00e5r vidare, h\u00e4r \u00e4r n\u00e5gra anv\u00e4ndbara tricks f\u00f6r terminalen: Ctrl + l eller clear : Rensar terminalf\u00f6nstret history : Visar tidigare anv\u00e4nda kommandon \u2b06\ufe0f ( upp\u00e5t-pilen ): Bl\u00e4ddrar genom tidigare kommandon Nu ska vi g\u00e5 igenom ett viktigt kommando. Tills nu har vi r\u00f6rt oss genom katalogerna utan att egentligen veta vad som finns i dem. F\u00f6r att hj\u00e4lpa oss med det och annat nyttigt s\u00e5 har vi kommandot ls (list). Om du anger endast ls s\u00e5 kommer filer och kataloger i katalogen du befinner dig i att visas. Vilket \u00e4r nyttigt, men m\u00e5nga g\u00e5nger vill man ha lite mer information. D\u00e4rf\u00f6r m\u00e5ste vi b\u00f6rja anv\u00e4nda oss av flaggor. Du har s\u00e4kert anv\u00e4nt flaggor n\u00e4r du hanterat ett projekt i git eller n\u00e4r du anv\u00e4nt dig av curl. Flaggor b\u00f6rjar med antingen - eller dubbla -- f\u00f6ljt av en bokstav eller ord. Exempelvis s\u00e5 kan du oftast f\u00e5 lite hj\u00e4lp med att f\u00f6rst\u00e5 hur ett kommando fungerar genom att skriva --help , vilket oftast \u00e4r flaggan f\u00f6r de kortfattade instruktionerna. Testa g\u00e4rna hj\u00e4lp-flaggan tillsammans med ls f\u00f6r att se outputen. ls --help ls har m\u00e5nga anv\u00e4ndbara flaggor, men tv\u00e5 av de mest anv\u00e4nda \u00e4r: -l (long listing format) Denna flagga ger en detaljerad lista med information om varje fil: R\u00e4ttigheter (vem som f\u00e5r l\u00e4sa/skriva/k\u00f6ra filen) Antal l\u00e4nkar till filen \u00c4gare Grupp\u00e4gare Filstorlek Senast \u00e4ndrad (datum och tid) Filnamn R\u00e4ttigheterna kommer vi g\u00e5 igenom n\u00e4rmre lite senare. -a (all) Som standard visar inte ls dolda filer (filer som b\u00f6rjar med en punkt). Med -a flaggan visas alla filer, inklusive: Dolda filer (de som b\u00f6rjar med .) Katalogen du st\u00e5r i (.) F\u00f6r\u00e4ldrakatalogen (..) Du kan ocks\u00e5 kombinera flaggor till en flagga. Till exempel visar ls -la eller ls -al en detaljerad lista \u00f6ver alla filer, inklusive dolda filer. Ett tips \u00e4r att l\u00e4gga till -h (human readable) n\u00e4r du anv\u00e4nder -l f\u00f6r att visa filstorlekar i ett mer l\u00e4sbart format (KB, MB, GB ist\u00e4llet f\u00f6r byte). Uppgift Precis som i f\u00f6rra delen s\u00e5 skriv bash test.sh f\u00f6r att starta uppgiften. Du kan anv\u00e4nda ls kommandot i skriptet. Ange \"svara\" n\u00e4r du vill svara p\u00e5 en fr\u00e5ga","title":"4 - Alla dessa flaggor..."},{"location":"4/#alla-dessa-flaggor","text":"G\u00e5 nu till Uppgifter/2 . Tips cd ../2 Innan vi g\u00e5r vidare, h\u00e4r \u00e4r n\u00e5gra anv\u00e4ndbara tricks f\u00f6r terminalen: Ctrl + l eller clear : Rensar terminalf\u00f6nstret history : Visar tidigare anv\u00e4nda kommandon \u2b06\ufe0f ( upp\u00e5t-pilen ): Bl\u00e4ddrar genom tidigare kommandon Nu ska vi g\u00e5 igenom ett viktigt kommando. Tills nu har vi r\u00f6rt oss genom katalogerna utan att egentligen veta vad som finns i dem. F\u00f6r att hj\u00e4lpa oss med det och annat nyttigt s\u00e5 har vi kommandot ls (list). Om du anger endast ls s\u00e5 kommer filer och kataloger i katalogen du befinner dig i att visas. Vilket \u00e4r nyttigt, men m\u00e5nga g\u00e5nger vill man ha lite mer information. D\u00e4rf\u00f6r m\u00e5ste vi b\u00f6rja anv\u00e4nda oss av flaggor. Du har s\u00e4kert anv\u00e4nt flaggor n\u00e4r du hanterat ett projekt i git eller n\u00e4r du anv\u00e4nt dig av curl. Flaggor b\u00f6rjar med antingen - eller dubbla -- f\u00f6ljt av en bokstav eller ord. Exempelvis s\u00e5 kan du oftast f\u00e5 lite hj\u00e4lp med att f\u00f6rst\u00e5 hur ett kommando fungerar genom att skriva --help , vilket oftast \u00e4r flaggan f\u00f6r de kortfattade instruktionerna. Testa g\u00e4rna hj\u00e4lp-flaggan tillsammans med ls f\u00f6r att se outputen. ls --help ls har m\u00e5nga anv\u00e4ndbara flaggor, men tv\u00e5 av de mest anv\u00e4nda \u00e4r: -l (long listing format) Denna flagga ger en detaljerad lista med information om varje fil: R\u00e4ttigheter (vem som f\u00e5r l\u00e4sa/skriva/k\u00f6ra filen) Antal l\u00e4nkar till filen \u00c4gare Grupp\u00e4gare Filstorlek Senast \u00e4ndrad (datum och tid) Filnamn R\u00e4ttigheterna kommer vi g\u00e5 igenom n\u00e4rmre lite senare. -a (all) Som standard visar inte ls dolda filer (filer som b\u00f6rjar med en punkt). Med -a flaggan visas alla filer, inklusive: Dolda filer (de som b\u00f6rjar med .) Katalogen du st\u00e5r i (.) F\u00f6r\u00e4ldrakatalogen (..) Du kan ocks\u00e5 kombinera flaggor till en flagga. Till exempel visar ls -la eller ls -al en detaljerad lista \u00f6ver alla filer, inklusive dolda filer. Ett tips \u00e4r att l\u00e4gga till -h (human readable) n\u00e4r du anv\u00e4nder -l f\u00f6r att visa filstorlekar i ett mer l\u00e4sbart format (KB, MB, GB ist\u00e4llet f\u00f6r byte).","title":"Alla dessa flaggor..."},{"location":"4/#uppgift","text":"Precis som i f\u00f6rra delen s\u00e5 skriv bash test.sh f\u00f6r att starta uppgiften. Du kan anv\u00e4nda ls kommandot i skriptet. Ange \"svara\" n\u00e4r du vill svara p\u00e5 en fr\u00e5ga","title":"Uppgift"},{"location":"5/","text":"The cat's pajamas N\u00e4st p\u00e5 tur s\u00e5 har vi cat -kommandot. Vi r\u00f6r oss vidare till Uppgifter/3 i terminalen. cat (concatenate) \u00e4r ett av de \u00e4ldsta kommandona som finns i Linux och det fungerar \u00e4ven p\u00e5 f\u00f6rsta versionen av Unix fr\u00e5n 1973. Kommandot kan anv\u00e4ndas f\u00f6r att se vad en fil inneh\u00e5ller utan att beh\u00f6va \u00f6ppna ett separat program. Anv\u00e4nd cat filnamn och filens inneh\u00e5ll visas direkt i terminalen. Du kan \u00e4ven sammanfoga flera filer samtidigt. Exempelvis cat fil1 fil2 fil3 skulle visa alla de tre filernas inneh\u00e5ll en efter en. Superbra att kunna se inneh\u00e5llet av filer utan att beh\u00f6va \u00f6ppna n\u00e5gra andra program men det m\u00e5ste v\u00e4l vara n\u00e5got mer man kan g\u00f6ra? Det kan vara bra att ha koll p\u00e5 Unix-filosofin n\u00e4r vi pratar om kommandon, specifikt de tv\u00e5 f\u00f6rsta punkterna. Sammanfattning av filosofin p\u00e5 Wikipedia fr\u00e5n McIlroy. Skriv program som g\u00f6r en sak och g\u00f6r det bra. Skriv program som arbetar tillsammans. Skriv program f\u00f6r att hantera textfl\u00f6den eftersom det \u00e4r ett universellt gr\u00e4nssnitt. cat g\u00f6r sin sak v\u00e4ldigt bra, och eftersom den f\u00f6ljer Unix-filosofin s\u00e5 interagerar den v\u00e4ldigt bra med andra kommandon och system. F\u00f6r att demonstrera det s\u00e5 kan vi anv\u00e4nda n\u00e5got som kallas 'redirects' i terminalen, bland annat > , >> och < . Nedan anv\u00e4nder vi de tv\u00e5 f\u00f6rsta tillsammans med cat , < \u00e4r n\u00e5got som inte riktigt beh\u00f6vs med kommandona vi har l\u00e4rt oss hittills men \u00e4r bra att f\u00f6rst\u00e5. Output redirection overwrite (>) > anv\u00e4nds f\u00f6r att skriva output till en fil. Om filen redan existerar s\u00e5 skriver man \u00f6ver den (s\u00e5 h\u00e5ll tungan r\u00e4tt i mun och kontrollera att du skrivit r\u00e4tt filnamn). I exemplet nedan s\u00e5 skrivs det som finns i fil1 och fil2 in tillsammans i en ny tredje fil. cat fil1.txt fil2.txt > fil3.txt Det \u00e4r inte bara cat som du kan anv\u00e4nda det h\u00e4r f\u00f6r. Allt som har en output kan anv\u00e4ndas, exempelvis echo som vi tagit upp tidigare kan du anv\u00e4nda f\u00f6r att skapa en ny fil med det som den printar. echo $PATH > minpath.txt Output redirection append (>>) >> fungerar som overwrite men l\u00e4gger ist\u00e4llet till output till filen. Exemplet nedan g\u00f6r att inneh\u00e5llet fr\u00e5n fil2 l\u00e4ggs till fil1 ist\u00e4llet f\u00f6r att skapa en ny fil. cat fil2.txt >> fil1.txt Input redirection < matar in inneh\u00e5llet fr\u00e5n en fil till ett kommando. Som jag n\u00e4mnde ovan \u00e4r det lite \u00f6verfl\u00f6digt f\u00f6r det vi jobbat med hittills s\u00e5 jag passar p\u00e5 att introducera tv\u00e5 nya kommandon h\u00e4r. Vi kan testa detta med kommandot wc (word count) som r\u00e4knar rader, ord och tecken i en fil. Med flaggan -l r\u00e4knar vi rader. wc -l < fil1.txt N\u00e4r vi anv\u00e4nder wc -l < fil1.txt s\u00e5 l\u00e4ser vi inneh\u00e5llet i filen och skickar det direkt till wc -kommandot. Det h\u00e4r kan j\u00e4mf\u00f6ras med wc -l fil1.txt som ger samma resultat. Vad \u00e4r d\u00e5 skillnaden? Varf\u00f6r ens anv\u00e4nda input redirection? Med wc -l fil1.txt s\u00e5 s\u00e4ger vi \u00e5t wc \"h\u00e4r \u00e4r en fil, l\u00e4s den\" Med wc -l < fil1.txt s\u00e5 s\u00e4ger vi ist\u00e4llet \"h\u00e4r \u00e4r inneh\u00e5llet fr\u00e5n en fil\" I de flesta fall f\u00e5r du samma resultat, men vissa kommandon \u00e4r byggda f\u00f6r att ta emot inneh\u00e5ll direkt och inte filnamn. Det h\u00e4r \u00e4r ett enkelt exempel p\u00e5 hur olika Unix-kommandon kan samarbeta p\u00e5 olika s\u00e4tt, antingen genom att skicka filer eller inneh\u00e5ll mellan varandra. Innan vi hoppar p\u00e5 uppgifterna s\u00e5 ska jag snabbt n\u00e4mna kommandot sort . Den sorterar text alfabetiskt men kan \u00e4ven sortera p\u00e5 annat, men det f\u00e5r du unders\u00f6ka sj\u00e4lv i --help. S\u00e4g att vi har en fil med olika emailadresser som du vill sortera i alfabetiskt ordning i en ny fil d\u00e5 kan du skriva som i exemplet nedan. sort < emails.txt > sorterade_emails.txt Precis som tidigare exempel s\u00e5 g\u00e5r det bra att skriva utan input redirection h\u00e4r d\u00e5 sort kan hantera filnamn utan problem. Uppgift Starta genom att skriva bash test.sh som vanligt.","title":"5 - The cat's pajamas"},{"location":"5/#the-cats-pajamas","text":"N\u00e4st p\u00e5 tur s\u00e5 har vi cat -kommandot. Vi r\u00f6r oss vidare till Uppgifter/3 i terminalen. cat (concatenate) \u00e4r ett av de \u00e4ldsta kommandona som finns i Linux och det fungerar \u00e4ven p\u00e5 f\u00f6rsta versionen av Unix fr\u00e5n 1973. Kommandot kan anv\u00e4ndas f\u00f6r att se vad en fil inneh\u00e5ller utan att beh\u00f6va \u00f6ppna ett separat program. Anv\u00e4nd cat filnamn och filens inneh\u00e5ll visas direkt i terminalen. Du kan \u00e4ven sammanfoga flera filer samtidigt. Exempelvis cat fil1 fil2 fil3 skulle visa alla de tre filernas inneh\u00e5ll en efter en. Superbra att kunna se inneh\u00e5llet av filer utan att beh\u00f6va \u00f6ppna n\u00e5gra andra program men det m\u00e5ste v\u00e4l vara n\u00e5got mer man kan g\u00f6ra? Det kan vara bra att ha koll p\u00e5 Unix-filosofin n\u00e4r vi pratar om kommandon, specifikt de tv\u00e5 f\u00f6rsta punkterna. Sammanfattning av filosofin p\u00e5 Wikipedia fr\u00e5n McIlroy. Skriv program som g\u00f6r en sak och g\u00f6r det bra. Skriv program som arbetar tillsammans. Skriv program f\u00f6r att hantera textfl\u00f6den eftersom det \u00e4r ett universellt gr\u00e4nssnitt. cat g\u00f6r sin sak v\u00e4ldigt bra, och eftersom den f\u00f6ljer Unix-filosofin s\u00e5 interagerar den v\u00e4ldigt bra med andra kommandon och system. F\u00f6r att demonstrera det s\u00e5 kan vi anv\u00e4nda n\u00e5got som kallas 'redirects' i terminalen, bland annat > , >> och < . Nedan anv\u00e4nder vi de tv\u00e5 f\u00f6rsta tillsammans med cat , < \u00e4r n\u00e5got som inte riktigt beh\u00f6vs med kommandona vi har l\u00e4rt oss hittills men \u00e4r bra att f\u00f6rst\u00e5. Output redirection overwrite (>) > anv\u00e4nds f\u00f6r att skriva output till en fil. Om filen redan existerar s\u00e5 skriver man \u00f6ver den (s\u00e5 h\u00e5ll tungan r\u00e4tt i mun och kontrollera att du skrivit r\u00e4tt filnamn). I exemplet nedan s\u00e5 skrivs det som finns i fil1 och fil2 in tillsammans i en ny tredje fil. cat fil1.txt fil2.txt > fil3.txt Det \u00e4r inte bara cat som du kan anv\u00e4nda det h\u00e4r f\u00f6r. Allt som har en output kan anv\u00e4ndas, exempelvis echo som vi tagit upp tidigare kan du anv\u00e4nda f\u00f6r att skapa en ny fil med det som den printar. echo $PATH > minpath.txt Output redirection append (>>) >> fungerar som overwrite men l\u00e4gger ist\u00e4llet till output till filen. Exemplet nedan g\u00f6r att inneh\u00e5llet fr\u00e5n fil2 l\u00e4ggs till fil1 ist\u00e4llet f\u00f6r att skapa en ny fil. cat fil2.txt >> fil1.txt Input redirection < matar in inneh\u00e5llet fr\u00e5n en fil till ett kommando. Som jag n\u00e4mnde ovan \u00e4r det lite \u00f6verfl\u00f6digt f\u00f6r det vi jobbat med hittills s\u00e5 jag passar p\u00e5 att introducera tv\u00e5 nya kommandon h\u00e4r. Vi kan testa detta med kommandot wc (word count) som r\u00e4knar rader, ord och tecken i en fil. Med flaggan -l r\u00e4knar vi rader. wc -l < fil1.txt N\u00e4r vi anv\u00e4nder wc -l < fil1.txt s\u00e5 l\u00e4ser vi inneh\u00e5llet i filen och skickar det direkt till wc -kommandot. Det h\u00e4r kan j\u00e4mf\u00f6ras med wc -l fil1.txt som ger samma resultat. Vad \u00e4r d\u00e5 skillnaden? Varf\u00f6r ens anv\u00e4nda input redirection? Med wc -l fil1.txt s\u00e5 s\u00e4ger vi \u00e5t wc \"h\u00e4r \u00e4r en fil, l\u00e4s den\" Med wc -l < fil1.txt s\u00e5 s\u00e4ger vi ist\u00e4llet \"h\u00e4r \u00e4r inneh\u00e5llet fr\u00e5n en fil\" I de flesta fall f\u00e5r du samma resultat, men vissa kommandon \u00e4r byggda f\u00f6r att ta emot inneh\u00e5ll direkt och inte filnamn. Det h\u00e4r \u00e4r ett enkelt exempel p\u00e5 hur olika Unix-kommandon kan samarbeta p\u00e5 olika s\u00e4tt, antingen genom att skicka filer eller inneh\u00e5ll mellan varandra. Innan vi hoppar p\u00e5 uppgifterna s\u00e5 ska jag snabbt n\u00e4mna kommandot sort . Den sorterar text alfabetiskt men kan \u00e4ven sortera p\u00e5 annat, men det f\u00e5r du unders\u00f6ka sj\u00e4lv i --help. S\u00e4g att vi har en fil med olika emailadresser som du vill sortera i alfabetiskt ordning i en ny fil d\u00e5 kan du skriva som i exemplet nedan. sort < emails.txt > sorterade_emails.txt Precis som tidigare exempel s\u00e5 g\u00e5r det bra att skriva utan input redirection h\u00e4r d\u00e5 sort kan hantera filnamn utan problem.","title":"The cat's pajamas"},{"location":"5/#uppgift","text":"Starta genom att skriva bash test.sh som vanligt.","title":"Uppgift"}]}